{"version":3,"sources":["../index.ts","../src/grammar.ts","../src/lexer/Lexer.ts","../src/lex.ts","../src/parser/Node.ts","../src/parser/AstNode.ts","../src/parser/nodes/ArrowNode.ts","../src/parser/nodes/ImgNode.ts","../src/parser/helpers/parse-class.ts","../src/parser/helpers/compile-style-attrs.ts","../src/parser/nodes/LineNode.ts","../src/parser/nodes/TxtNode.ts","../src/compiler/helpers/compile-with-vgap.js","../src/parser/nodes/GroupNode.ts","../src/parser/nodes/ColNode.ts","../src/parser/nodes/ColsNode.ts","../src/parser/nodes/SpaceNode.ts","../src/parser/nodes/BtnNode.ts","../src/parser/nodes/IncludeNode.ts","../src/parser/nodes/DefNode.ts","../src/parser/nodes/StylePropertyNode.ts","../src/parser/nodes/StyleNode.ts","../src/parser/helpers/parse-head.ts","../src/parser/helpers/parse-body.ts","../src/parser/nodes/BodyNode.ts","../src/parser/nodes/RootNode.ts","../src/errors/UnexpectedToken.ts","../src/parser/Parser.ts","../src/parse.ts","../src/compiler/Compiler.ts","../src/compile.ts"],"sourcesContent":["import * as fs from \"fs\";\nimport lex from \"./src/lex\";\nimport parse from \"./src/parse\";\nimport compile from \"./src/compile\";\n\nconst code = fs.readFileSync('./example/test.elos', 'utf8');\n\nconst tokens = lex(code);\nconst ast = parse(tokens);\nconst output = compile(ast);\n\nfs.writeFileSync('./example/test.html', output);","export default {\n\n    REGEX_IDENT: /[a-zA-ZÆÐƎƏƐƔĲŊŒẞÞǷȜæðǝəɛɣĳŋœĸſßþƿȝĄƁÇĐƊĘĦĮƘŁØƠŞȘŢȚŦŲƯY̨Ƴąɓçđɗęħįƙłøơşșţțŧųưy̨ƴÁÀÂÄǍĂĀÃÅǺĄÆǼǢƁĆĊĈČÇĎḌĐƊÐÉÈĖÊËĚĔĒĘẸƎƏƐĠĜǦĞĢƔáàâäǎăāãåǻąæǽǣɓćċĉčçďḍđɗðéèėêëěĕēęẹǝəɛġĝǧğģɣĤḤĦIÍÌİÎÏǏĬĪĨĮỊĲĴĶƘĹĻŁĽĿʼNŃN̈ŇÑŅŊÓÒÔÖǑŎŌÕŐỌØǾƠŒĥḥħıíìiîïǐĭīĩįịĳĵķƙĸĺļłľŀŉńn̈ňñņŋóòôöǒŏōõőọøǿơœŔŘŖŚŜŠŞȘṢẞŤŢṬŦÞÚÙÛÜǓŬŪŨŰŮŲỤƯẂẀŴẄǷÝỲŶŸȲỸƳŹŻŽẒŕřŗſśŝšşșṣßťţṭŧþúùûüǔŭūũűůųụưẃẁŵẅƿýỳŷÿȳỹƴźżžẓ]/,\n    REGEX_NUMBER: /\\d/,\n    REGEX_SYMBOL: /[.!?,;:()\\-+=%*\\\\/—–…${}><&#@°]/,\n    REGEX_WHITESPACE: /\\s/,\n    REGEX_NEWLINE: /[\\n\\r]/,\n    REGEX_STRING_DELIMITER: /[\"']/,\n\n    BLOCK_OPEN_SYMBOL: '{',\n    BLOCK_CLOSE_SYMBOL: '}'\n};\n","\"use strict\";\n\nimport grammar from \"../grammar.js\";\nimport {LexMode} from \"../types/lex-mode\";\nimport {TokenStream} from \"../types/token-stream\";\nimport {TokenType} from \"../types/token-type\";\n\nexport class Lexer {\n\n    private mode: LexMode = LexMode.ALL;\n\n    private cursor: number = 0;\n\n    private end: number = 0;\n\n    private currLine: number = 1;\n\n    private currLinePos: number = 1;\n\n    private tokens: TokenStream = [];\n\n    private currTokenValue: string = '';\n\n    private currCharacter: string = '';\n\n    private nextCharacter: string = '';\n\n    private tokenDelimiter: string = '';\n\n    determineMode(): LexMode {\n\n        // Reset the current token value\n        this.currTokenValue = '';\n\n        if (grammar.REGEX_IDENT.exec(this.currCharacter)) {\n            return LexMode.IDENT;\n        }\n\n        if (grammar.REGEX_STRING_DELIMITER.exec(this.currCharacter)) {\n            this.tokenDelimiter = this.currCharacter;\n            return LexMode.STRING;\n        }\n\n        if (grammar.REGEX_NUMBER.exec(this.currCharacter)) {\n            return LexMode.NUMBER;\n        }\n\n        if (grammar.REGEX_SYMBOL.exec(this.currCharacter)) {\n            return LexMode.SYMBOL;\n        }\n\n        if (grammar.REGEX_NEWLINE.exec(this.currCharacter)) {\n            return LexMode.NEWLINE;\n        }\n\n        if (grammar.REGEX_WHITESPACE.exec(this.currCharacter)) {\n            return LexMode.WHITESPACE;\n        }\n\n        return LexMode.UNKNOWN;\n    }\n\n    lexIdent() {\n\n        this.currTokenValue += this.currCharacter;\n        this.cursor++;\n        this.currLinePos++;\n\n        if (! this.nextCharacter || ! grammar.REGEX_IDENT.exec(this.nextCharacter)) {\n            this.tokens.push({\n                type: TokenType.IDENT,\n                value: this.currTokenValue,\n                line: this.currLine,\n                position: this.currLinePos,\n                end: this.cursor < this.end\n            });\n            this.mode = LexMode.ALL;\n        }\n    }\n\n    lexString() {\n\n        if (this.tokenDelimiter !== this.currCharacter) {\n            this.currTokenValue += this.currCharacter;\n        }\n        this.cursor++;\n\n        if (this.nextCharacter === this.tokenDelimiter) {\n            this.tokens.push({\n                type: TokenType.STRING,\n                value: this.currTokenValue,\n                line: this.currLine,\n                position: this.currLinePos,\n                end: this.cursor < this.end\n            });\n            this.mode = LexMode.ALL;\n            this.cursor++;\n            this.currLinePos++;\n            this.tokenDelimiter = '';\n        }\n    }\n\n    lexNumber() {\n        this.currTokenValue += this.currCharacter;\n        this.cursor++;\n        this.currLinePos++;\n\n        if (!this.nextCharacter || !grammar.REGEX_NUMBER.exec(this.nextCharacter)) {\n            this.tokens.push({\n                type: TokenType.NUMBER,\n                value: this.currTokenValue,\n                line: this.currLine,\n                position: this.currLinePos,\n                end: this.cursor < this.end\n            });\n            this.mode = LexMode.ALL;\n        }\n    }\n\n    lexSymbol() {\n        this.tokens.push({\n            type: TokenType.SYMBOL,\n            value: this.currCharacter,\n            line: this.currLine,\n            position: this.currLinePos,\n            end: this.cursor < this.end\n        });\n        this.cursor++;\n        this.currLinePos++;\n        this.mode = LexMode.ALL;\n    }\n\n    lexNewline() {\n        this.cursor++;\n        this.currLine++;\n        this.currLinePos = 0;\n        this.mode = LexMode.ALL;\n    }\n\n    lexWhitespace() {\n        this.cursor++;\n        this.mode = LexMode.ALL;\n    }\n\n    lexUnknown() {\n        this.tokens.push({\n            type: TokenType.UNKNOWN,\n            value: this.currCharacter,\n            line: this.currLine,\n            position: this.currLinePos,\n            end: this.cursor < this.end\n        });\n        this.cursor++;\n        this.currLinePos++;\n        this.mode = LexMode.ALL;\n    }\n\n    tokenize(text: string): TokenStream {\n\n        this.end = text.length;\n\n        while (this.cursor < this.end) {\n\n            this.currCharacter = text[this.cursor];\n            this.nextCharacter = text[this.cursor+1] || null;\n\n            // Determine the mode\n            if (this.mode === LexMode.ALL) {\n                this.mode = this.determineMode();\n            }\n\n            switch (this.mode) {\n                case LexMode.STRING:\n                    this.lexString();\n                    break;\n                case LexMode.IDENT:\n                    this.lexIdent();\n                    break;\n                case LexMode.NUMBER:\n                    this.lexNumber();\n                    break;\n                case LexMode.SYMBOL:\n                    this.lexSymbol();\n                    break;\n                case LexMode.NEWLINE:\n                    this.lexNewline();\n                    break;\n                case LexMode.WHITESPACE:\n                    this.lexWhitespace();\n                    break;\n                case LexMode.UNKNOWN:\n                    this.lexUnknown();\n                    break;\n            }\n        }\n\n        return this.tokens;\n    }\n}\n","\"use strict\";\n\nimport {Lexer} from \"./lexer/Lexer\";\nimport {TokenStream} from \"./types/token-stream\";\n\nexport default function lex(text: string): TokenStream {\n    return (new Lexer()).tokenize(text);\n}\n","import {Nullable} from \"../types/nullable\";\nimport {AttributeValue} from \"../types/attribute\";\nimport Parser from \"./Parser\";\n\nexport default class Node {\n\n    protected value: string;\n\n    protected parent: Nullable<Node> = null;\n\n    protected children: Node[] = [];\n\n    protected attributes: Record<string, AttributeValue> = {};\n\n    constructor(value: string = '') {\n        this.value = value;\n    }\n\n    getName(): string {\n        return this.constructor.name;\n    }\n\n    setParent(node: Node) {\n        this.parent = node;\n    }\n\n    getParent(): Node {\n        return this.parent;\n    }\n\n    getVal(): string {\n        return this.value;\n    }\n\n    setVal(value: string) {\n        this.value = value;\n    }\n\n    addChild(node: Node) {\n        this.children.push(node);\n    }\n\n    getChildren() {\n        return this.children;\n    }\n\n    hasChildren() {\n        return (this.children.length > 0);\n    }\n\n    setAttribute(name: string, value: AttributeValue) {\n        this.attributes[name] = value;\n    }\n\n    getAttribute(name: string): AttributeValue {\n        return this.attributes[name];\n    }\n\n    removeLastChild() {\n        this.children.pop();\n    }\n\n    parse(parser: Parser): boolean {\n        return false;\n    }\n\n    compile(compiler) {\n    }\n}\n","import Node from \"./Node\";\n\nexport default class AstNode extends Node {\n    compile(compiler) {\n        this.getChildren().forEach(child => child.compile(compiler));\n    }\n}\n","import Node from \"../Node\";\nimport Parser from \"../Parser\";\nimport {TokenType} from \"../../types/token-type\";\n\nexport default class ArrowNode extends Node {\n\n\tstatic parse(parser: Parser): boolean {\n\t\tif (\n\t\t\tparser.acceptWithVal(TokenType.SYMBOL, '-')\n\t\t) {\n\t\t\tparser.expectAtWithVal(TokenType.SYMBOL, 1, '>');\n\t\t\tparser.advance(2);\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n}\n","import Node from \"../Node\";\nimport Parser from \"../Parser\";\nimport {TokenType} from \"../../types/token-type\";\nimport ArrowNode from \"./ArrowNode\";\nimport {Nullable} from \"../../types/nullable\";\nimport Compiler from \"../../compiler/Compiler\";\n\nexport default class ImgNode extends Node {\n\n    private url: Nullable<string>;\n\n    constructor(value: string, url: string = null) {\n        super(value);\n        this.url = url;\n    }\n\n    static parse(parser: Parser) {\n\n        if (parser.acceptWithVal(TokenType.IDENT, 'img')) {\n            parser.advance();\n\n            parser.expect(TokenType.STRING);\n            let value = parser.getCurrVal();\n            parser.advance();\n\n            if (ArrowNode.parse(parser)) {\n\n                parser.expect(TokenType.STRING);\n                let urlValue = parser.getCurrVal();\n\n                parser.insert(new ImgNode(value, urlValue));\n                parser.advance();\n                return true;\n            }\n\n            parser.insert(new ImgNode(value));\n\n            return true;\n        }\n\n        return false;\n    }\n\n    compile(compiler: Compiler) {\n\n        const scrollBarWidth = 15;\n        const width = parseInt(compiler.variable('width') as string);\n        const mediaQueryWidth = width + parseInt(compiler.variable('edge') as string) * 2 + scrollBarWidth;\n\n        const imgId = compiler.remember('imgId', parseInt(compiler.get('imgId') as string) + 1);\n        const currWidth = parseInt(compiler.get('currWidth') as string);\n\n        compiler.writeLnHead(`<style media=\"screen and (min-width:${mediaQueryWidth}px)\">`);\n        compiler.writeLnHead(`.elos-img-${imgId} {`);\n        compiler.writeLnHead(`width: ${currWidth}px !important;`);\n        compiler.writeLnHead('}');\n        compiler.writeLnHead('</style>');\n\n        if (this.url) {\n            compiler.writeLn(`<a href=\"${this.url}\" target=\"_blank\" style=\"text-decoration: none;\">`);\n        }\n\n        compiler.writeLn(`<img class=\"elos-img-${imgId}\" border=\"0\" src=\"${this.getVal()}\" style=\"display:block; border: 0; width: 100%;\"/>`);\n\n        if (this.url) {\n            compiler.writeLn(`</a>`);\n        }\n    }\n}\n","import {TokenType} from \"../../types/token-type.js\";\nimport Parser from \"../Parser\";\nimport {Nullable} from \"../../types/nullable\";\n\nexport default function parseClass(parser: Parser): Nullable<string> {\n\n    if (parser.skipWithVal(TokenType.SYMBOL, '.')) {\n        parser.expect(TokenType.IDENT);\n        let className = parser.getCurrVal();\n        parser.advance();\n        return className;\n    }\n\n    return null;\n}\n","import Compiler from \"../../compiler/Compiler\";\n\nconst propMap = {\n    size: {\n        type: 'integer',\n        unit: 'px',\n        cssProperty: 'font-size'\n    },\n    weight: {\n        type: 'string',\n        cssProperty: 'font-weight'\n    },\n    height: {\n        type: 'integer',\n        unit: 'px',\n        cssProperty: 'height'\n    },\n    width: {\n        type: 'integer',\n        unit: 'px',\n        cssProperty: 'weight'\n    },\n    transform: {\n        type: 'string',\n        cssProperty: 'text-transform'\n    },\n    color: {\n        type: 'string',\n        cssProperty: 'color'\n    },\n    bgcolor: {\n        type: 'string',\n        cssProperty: 'background-color'\n    },\n    rounded: {\n        type: 'integer',\n        unit: 'px',\n        cssProperty: 'border-radius'\n    },\n    padding: {\n        type: 'integer',\n        unit: 'px',\n        cssProperty: 'padding'\n    },\n    align: {\n        type: 'string',\n        cssProperty: 'text-align'\n    }\n};\n\nexport default {\n    compileStyleAttrs(compiler: Compiler, ident: string, className: string = null, defaults = {}) {\n\n        const name = (className ? className : ident);\n        const styles = (className ? compiler.get('classes') : compiler.get('identStyles'));\n        const properties = styles[name] || [];\n        const css = defaults;\n\n        properties.forEach(prop => {\n\n            let cssProp = '';\n            let type = 'string';\n\n            if (propMap[prop[0]]) {\n\n                type = propMap[prop[0]]['type'];\n                cssProp = propMap[prop[0]]['cssProperty'];\n\n                switch (type) {\n                    case 'string':\n                        css[cssProp] = prop[1];\n                        break;\n                    case 'integer':\n                        const unit = (propMap[prop[0]]['unit'] ? 'px' : '');\n                        css[cssProp] = parseInt(prop[1])+unit;\n                        break;\n                }\n            }\n        });\n\n        return css;\n    },\n    attrsToCssString(cssProps) {\n        let output = '';\n\n        for (let prop in cssProps) {\n            output += `${prop}: ${cssProps[prop]};`;\n        }\n\n        return output;\n    }\n};\n","import Node from \"../Node\";\nimport parseClass from \"../helpers/parse-class.js\";\nimport styleCompiler from \"../helpers/compile-style-attrs.js\";\nimport {Nullable} from \"../../types/nullable\";\nimport Parser from \"../Parser\";\nimport {TokenType} from \"../../types/token-type\";\n\nexport default class LineNode extends Node {\n\n  private className: Nullable<string>;\n\n  constructor(value: string, className: string = null) {\n    super(value);\n    this.className = className;\n  }\n\n  static parse(parser: Parser): boolean {\n    if (parser.acceptWithVal(TokenType.IDENT, \"line\")) {\n      parser.advance();\n      let className = parseClass(parser);\n      parser.insert(new LineNode(\"\", className));\n      return true;\n    }\n\n    return false;\n  }\n\n  compile(compiler) {\n    const width = parseInt(compiler.variable(\"width\"));\n\n    const css = styleCompiler.compileStyleAttrs(\n      compiler,\n      \"line\",\n      this.className,\n      {\n        height: \"2px\",\n        \"background-color\": \"#000000\",\n      }\n    );\n\n    const cssString = styleCompiler.attrsToCssString(css);\n\n    compiler.writeLn(\n      `<table width=\"100%;\" cellspacing=\"0\" cellpadding=\"0\" style=\"width: 100%; max-width:${width}px;border:none;border-spacing:0;text-align:left;\">`\n    );\n    compiler.writeLn(\"<tr>\");\n    compiler.writeLn(`<td style=\"${cssString}\"></td>`);\n    compiler.writeLn(\"</tr>\");\n    compiler.writeLn(\"</table>\");\n  }\n}\n","import Node from \"../Node\";\nimport parseClass from \"../helpers/parse-class.js\";\nimport styleCompiler from \"../helpers/compile-style-attrs.js\";\nimport {Nullable} from \"../../types/nullable\";\nimport Parser from \"../Parser\";\nimport {TokenType} from \"../../types/token-type\";\nimport ArrowNode from \"./ArrowNode\";\n\nexport default class TxtNode extends Node {\n\n    private className: Nullable<string>;\n    private url: Nullable<string>;\n\n    constructor(value: string, className: string = null, url: string = null) {\n        super(value);\n        this.className = className;\n        this.url = url;\n    }\n\n    static parse(parser: Parser): boolean {\n\n        if (parser.acceptWithVal(TokenType.IDENT, 'txt')) {\n            parser.advance();\n\n            let className = parseClass(parser);\n\n            parser.expect(TokenType.STRING);\n            let textValue = parser.getCurrVal();\n            parser.advance();\n\n            if (ArrowNode.parse(parser)) {\n\n                parser.expect(TokenType.STRING);\n                let urlValue = parser.getCurrVal();\n\n                parser.insert(new TxtNode(textValue, className, urlValue));\n                parser.advance();\n                return true;\n            }\n\n            parser.insert(new TxtNode(textValue, className));\n            return true;\n        }\n\n        return false;\n    }\n\n    compile(compiler) {\n\n        const width = compiler.variable('width');\n\n        const css = styleCompiler.compileStyleAttrs(compiler, 'txt', this.className, {\n            'font-size': '12px',\n            'color': '#000000',\n            'line-height': '16px',\n            'text-decoration': 'none'\n        });\n\n        const cssString = styleCompiler.attrsToCssString(css);\n\n        compiler.writeLn(`<table cellspacing=\"0\" cellpadding=\"0\" style=\"max-width:${width}px;border:none;border-spacing:0;text-align:left;\">`);\n        compiler.writeLn('<tr>');\n        compiler.writeLn(`<td style=\"${cssString}\">`);\n\n        if (this.url) {\n            compiler.writeLn(`<a href=\"${this.url}\" target=\"_blank\" style=\"${cssString}\">`);\n            compiler.writeLn(`${this.getVal()}`);\n            compiler.writeLn(`</a>`);\n        } else {\n            compiler.writeLn(`${this.getVal()}`);\n        }\n\n        compiler.writeLn(`</td>`);\n        compiler.writeLn('</tr>');\n        compiler.writeLn('</table>');\n    }\n}\n","\"use strict\";\n\nexport default {\n    compileWithVgap(compiler, children, center = false) {\n\n        const childCount = children.length;\n        const vgap = compiler.variable('vgap');\n\n        const cssString = (center ? '' : 'width: 100%;');\n\n        if (childCount) {\n            compiler.writeLn(`<table role=\"presentation\" style=\"${cssString}border:none;border-spacing:0;text-align:left;font-family:Arial,sans-serif;font-size:16px;line-height:22px;color:#363636;\">`);\n\n            children.forEach((child, i) => {\n\n                compiler.writeLn('<tr>');\n                compiler.writeLn('<td>');\n                child.compile(compiler);\n                compiler.writeLn('</td>');\n                compiler.writeLn('</tr>');\n\n                if (i < childCount-1) {\n                    compiler.writeLn(`<tr><td height=\"${vgap}\"></td></tr>`);\n                }\n            });\n\n            compiler.writeLn(`</table>`);\n        }\n    }\n};\n","import Node from \"../Node\";\nimport parseBody from \"../helpers/parse-body\";\nimport styleCompiler from \"../helpers/compile-style-attrs.js\";\nimport parseClass from \"../helpers/parse-class.js\";\nimport config from \"../../grammar.js\";\nimport compilerHelpers from \"../../compiler/helpers/compile-with-vgap.js\";\nimport {TokenType} from \"../../types/token-type\";\nimport Parser from \"../Parser\";\n\nexport default class GroupNode extends Node {\n\n    private className: string;\n\n    constructor(value: string, className: string) {\n        super(value);\n        this.className = className;\n    }\n\n    static parse(parser: Parser) {\n\n        if (parser.acceptWithVal(TokenType.IDENT, 'group')) {\n            parser.advance();\n\n            let className = parseClass(parser);\n\n            if (parser.acceptWithVal(TokenType.SYMBOL, config.BLOCK_OPEN_SYMBOL)) {\n                parser.advance();\n\n                parser.insert(new GroupNode('', className));\n                parser.in();\n\n                parseBody(parser);\n\n                if (parser.acceptWithVal(TokenType.SYMBOL, config.BLOCK_CLOSE_SYMBOL)) {\n                    parser.out();\n                    parser.advance();\n                }\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    compile(compiler) {\n\n        const css = styleCompiler.compileStyleAttrs(compiler, 'group', this.className,{\n            'background-color': '#f0f0f0',\n            'padding': '25px',\n            'text-align': 'left'\n        });\n\n        const bgColor = css['background-color'];\n        const padding = parseInt(css['padding']);\n        const align = css['text-align'];\n\n        const currWidth = parseInt(compiler.get('currWidth'));\n        compiler.remember('currWidth', currWidth - (padding*2));\n\n        compiler.writeLn(`<table width=\"100%;\" cellspacing=\"0\" cellpadding=\"0\" style=\"width:100%;max-width:${currWidth}px;border:none;border-spacing:0;text-align:left;\">`);\n\n        compiler.writeLn('<tr>');\n        compiler.writeLn(`<td bgcolor=\"${bgColor}\" width=\"${padding}\"></td>`);\n        compiler.writeLn(`<td bgcolor=\"${bgColor}\" height=\"${padding}\"></td>`);\n        compiler.writeLn(`<td bgcolor=\"${bgColor}\" width=\"${padding}\"></td>`);\n        compiler.writeLn('</tr>');\n\n        compiler.writeLn('<tr>');\n        compiler.writeLn(`<td bgcolor=\"${bgColor}\" width=\"${padding}\"></td>`);\n        compiler.writeLn(`<td bgcolor=\"${bgColor}\" align=\"${align}\">`);\n\n        compilerHelpers.compileWithVgap(compiler, this.getChildren(), (align === 'center'));\n\n        compiler.writeLn('</td>');\n        compiler.writeLn(`<td bgcolor=\"${bgColor}\" width=\"${padding}\"></td>`);\n        compiler.writeLn('</tr>');\n\n        compiler.writeLn('<tr>');\n        compiler.writeLn(`<td bgcolor=\"${bgColor}\" width=\"${padding}\"></td>`);\n        compiler.writeLn(`<td bgcolor=\"${bgColor}\" height=\"${padding}\"></td>`);\n        compiler.writeLn(`<td bgcolor=\"${bgColor}\" width=\"${padding}\"></td>`);\n        compiler.writeLn('</tr>');\n\n        compiler.writeLn('</table>');\n\n        compiler.remember('currWidth', currWidth);\n    }\n}\n","\"use strict\";\n\nimport Node from \"../Node\";\nimport parseBody from \"../helpers/parse-body\";\nimport compilerHelpers from \"../../compiler/helpers/compile-with-vgap.js\";\nimport config from \"../../grammar.js\";\nimport {TokenType} from \"../../types/token-type\";\nimport Parser from \"../Parser\";\n\nexport default class ColNode extends Node {\n\n    static parse(parser: Parser) {\n\n        if (parser.acceptWithVal(TokenType.IDENT, 'col')) {\n            parser.advance();\n\n            if (parser.acceptWithVal(TokenType.SYMBOL, config.BLOCK_OPEN_SYMBOL)) {\n                parser.advance();\n\n                parser.insert(new ColNode());\n                parser.in();\n\n                parseBody(parser);\n\n                if (parser.acceptWithVal(TokenType.SYMBOL, config.BLOCK_CLOSE_SYMBOL)) {\n                    parser.out();\n                    parser.advance();\n                }\n\n                return true;\n            }\n\n        }\n\n        return false;\n    }\n\n    compile(compiler) {\n        compilerHelpers.compileWithVgap(compiler, this.getChildren());\n    }\n}\n","\"use strict\";\n\nimport Node from \"../Node\";\nimport ColNode from \"./ColNode.js\";\nimport Parser from \"../Parser\";\nimport {TokenType} from \"../../types/token-type\";\n\nexport default class ColsNode extends Node {\n\n    static parse(parser: Parser): boolean {\n\n        if (parser.acceptWithVal(TokenType.IDENT, 'cols')) {\n            parser.advance();\n\n            parser.insert(new ColsNode());\n            parser.in();\n\n            while (ColNode.parse(parser));\n\n            parser.out();\n            return true;\n        }\n\n        return false;\n    }\n\n    compile(compiler) {\n\n        const colsId = compiler.remember('colsId', parseInt(compiler.get('colsId')) + 1);\n\n        const scrollBarWidth = 15;\n        const colCount = this.getChildren().length;\n        const currWidth = parseInt(compiler.get('currWidth'));\n        const width = parseInt(compiler.variable('width'));\n        const mediaQueryWidth = width + parseInt(compiler.variable('edge')) * 2 + scrollBarWidth;\n        const gap = parseInt(compiler.variable('hgap'));\n        const colWidth = Math.floor((currWidth / colCount) - gap + Math.floor(gap / colCount));\n\n        compiler.writeLn(`<table width=\"100%;\" cellspacing=\"0\" cellpadding=\"0\" style=\"width: 100%; max-width:${currWidth}px;border:none;border-spacing:0;text-align:left;\">`);\n        compiler.writeLn('<tr>');\n        compiler.writeLn('<td>');\n\n        compiler.writeLn('<!--[if mso]>');\n        compiler.writeLn('<table role=\"presentation\" width=\"100%\">');\n        compiler.writeLn('<tr>');\n        compiler.writeLn('<![endif]-->');\n\n        this.getChildren().forEach((child, i) => {\n\n            compiler.remember('currWidth', colWidth);\n\n            compiler.writeLnHead(`<style media=\"screen and (min-width:${mediaQueryWidth}px)\">`);\n            compiler.writeLnHead(`.elos-col-${colsId}-${i} {`);\n            compiler.writeLnHead(`float: left;`);\n            compiler.writeLnHead(`max-width: ${colWidth}px !important;`);\n            //compiler.writeLnHead(`padding-left: ${gap/2}px;`);\n            compiler.writeLnHead(`margin-bottom: 0 !important;`);\n\n            if (i < colCount-1) {\n                compiler.writeLnHead(`padding-right: ${gap}px !important;`);\n            }\n\n            if (i===0) {\n                //compiler.writeLnHead(`margin-left: -${gap/2}px;`);\n            }\n\n            compiler.writeLnHead('}');\n            compiler.writeLnHead('</style>');\n\n            compiler.writeLn('<!--[if mso]>');\n            compiler.writeLn(`<td style=\"width: ${colWidth}px; padding: 0;\" align=\"left\" valign=\"top\">`);\n            compiler.writeLn('<![endif]-->');\n            compiler.writeLn(`<div class=\"elos-col-${colsId}-${i}\" style=\"display:inline-block; margin-bottom: ${gap}px; width:100%; vertical-align:top; text-align:left;\">`);\n\n            child.compile(compiler);\n\n            compiler.writeLn('</div>');\n            compiler.writeLn('<!--[if mso]>');\n            compiler.writeLn('</td>');\n            compiler.writeLn('<![endif]-->');\n\n        });\n\n        compiler.remember('currWidth', currWidth);\n\n        compiler.writeLn('<!--[if mso]>');\n        compiler.writeLn('</tr>');\n        compiler.writeLn('</table>');\n        compiler.writeLn('<![endif]-->');\n\n        compiler.writeLn('</td>');\n        compiler.writeLn('</tr>');\n        compiler.writeLn('</table>');\n    }\n}\n","import Node from \"../Node\";\nimport parseClass from \"../helpers/parse-class.js\";\nimport styleCompiler from \"../helpers/compile-style-attrs.js\";\nimport {Nullable} from \"../../types/nullable\";\nimport Parser from \"../Parser\";\nimport {TokenType} from \"../../types/token-type\";\n\nexport default class SpaceNode extends Node {\n\n    private className: Nullable<string>;\n\n    constructor(value: string, className: string = null) {\n        super(value);\n        this.className = className;\n    }\n\n    static parse(parser: Parser): boolean {\n\n        if (parser.acceptWithVal(TokenType.IDENT, 'space')) {\n            parser.advance();\n            let className = parseClass(parser);\n            parser.insert(new SpaceNode('', className));\n            return true;\n        }\n\n        return false;\n    }\n\n    compile(compiler) {\n\n        const width = compiler.variable('width');\n\n        const css = styleCompiler.compileStyleAttrs(compiler, 'space', this.className,{\n            'height': '25px'\n        });\n\n        const cssString = styleCompiler.attrsToCssString(css);\n\n        compiler.writeLn(`<table width=\"100%;\" cellspacing=\"0\" cellpadding=\"0\" style=\"width: 100%; max-width:${width}px;border:none;border-spacing:0;text-align:left;\">`);\n        compiler.writeLn('<tr>');\n        compiler.writeLn(`<td style=\"${cssString}\"></td>`);\n        compiler.writeLn('</tr>');\n        compiler.writeLn('</table>');\n    }\n}\n","import Node from \"../Node\";\nimport parseClass from \"../helpers/parse-class.js\";\nimport styleCompiler from \"../helpers/compile-style-attrs.js\";\nimport {Nullable} from \"../../types/nullable\";\nimport Parser from \"../Parser\";\nimport {TokenType} from \"../../types/token-type\";\n\nexport default class BtnNode extends Node {\n\n    private className: Nullable<string>;\n    private url: Nullable<string>;\n\n    constructor(value: string, className: string, url = null) {\n        super(value);\n        this.className = className;\n        this.url = url;\n    }\n\n    static parse(parser: Parser) {\n\n        if (parser.acceptWithVal(TokenType.IDENT, 'btn')) {\n            parser.advance();\n\n            let className = parseClass(parser);\n\n            parser.expect(TokenType.STRING);\n            let textValue = parser.getCurrVal();\n            parser.advance();\n\n            if (\n                parser.acceptWithVal(TokenType.SYMBOL, '-') &&\n                parser.acceptAtWithVal(TokenType.SYMBOL, 1, '>')\n            ) {\n                parser.advance(2);\n\n                parser.expect(TokenType.STRING);\n                let urlValue = parser.getCurrVal();\n\n                parser.insert(new BtnNode(textValue, className, urlValue));\n                parser.advance();\n                return true;\n            }\n\n            parser.insert(new BtnNode(textValue, className));\n            return true;\n        }\n\n        return false;\n    }\n\n    compile(compiler) {\n\n        const width = compiler.get('currWidth');\n\n        let css = styleCompiler.compileStyleAttrs(compiler, 'btn', this.className, {\n            'background-color': '#000000',\n            'color': '#ffffff',\n            'border-radius': '8px',\n            'font-size': '12px',\n            'font-weight': 'normal',\n            'line-height': '16px',\n            'text-decoration': 'none',\n            'text-transform': 'none',\n            'padding': '8px 16px'\n        });\n\n        const bgColor = css['background-color'];\n        const padding = css['padding'];\n        const borderRadius = css['border-radius'];\n\n        const cssString = styleCompiler.attrsToCssString(css);\n\n        compiler.writeLn(`<table border=\"0\" cellPadding=\"0\" cellSpacing=\"0\" role=\"presentation\" style=\"border-collapse:separate;line-height:100%;\">`);\n        compiler.writeLn('<tbody>');\n        compiler.writeLn('<tr>');\n        compiler.writeLn(`<td align=\"center\" bgcolor=\"${bgColor}\" role=\"presentation\" style=\"border:none;border-radius:${borderRadius};cursor:auto;mso-padding-alt:${padding};background:${bgColor};\" valign=\"middle\">`);\n        compiler.writeLn(`<a href=\"${this.url ? this.url : '#'}\" style=\"display:inline-block;margin:0;${cssString}\" target=\"_blank\">`);\n        compiler.writeLn(this.getVal());\n        compiler.writeLn('</a>');\n        compiler.writeLn('</td>');\n        compiler.writeLn('</tr>');\n        compiler.writeLn('</tbody>');\n        compiler.writeLn('</table>');\n    }\n}\n","import Node from \"../Node\";\nimport Parser from \"../Parser\";\nimport {TokenType} from \"../../types/token-type\";\nimport lex from \"../../lex\";\nimport * as fs from \"node:fs\";\nimport Compiler from \"../../compiler/Compiler\";\nimport parseBody from \"../helpers/parse-body\";\nimport parseHead from \"../helpers/parse-head\";\nimport compilerHelpers from \"../../compiler/helpers/compile-with-vgap\";\n\nexport default class IncludeNode extends Node {\n\n    static parse(parser: Parser): boolean {\n\n        if (parser.acceptWithVal(TokenType.IDENT, 'include')) {\n            parser.advance();\n\n            parser.expect(TokenType.STRING);\n            let textValue = parser.getCurrVal();\n            parser.insert(new IncludeNode(textValue));\n\n            parser.advance();\n\n            return true;\n        }\n\n        return false;\n    }\n\n    compile(compiler: Compiler) {\n\n        const code = fs.readFileSync(`./example/${this.getVal()}.elos`, 'utf8');\n\n        // Lex\n        const tokens = lex(code);\n\n        // Parse\n        const parser = new Parser();\n        parser.setTokenStream(tokens);\n\n        parseHead(parser);\n        parseBody(parser);\n\n        const ast = parser.getAst();\n        ast.setParent(this.getParent());\n\n        // Compile\n        const clonedCompiler = compiler.clone();\n        compilerHelpers.compileWithVgap(clonedCompiler, ast.getChildren());\n        compiler.setMemory(clonedCompiler.getMemory());\n\n        compiler.writeHead(clonedCompiler.getHead());\n        compiler.write(clonedCompiler.getBody());\n    }\n}\n","import Node from \"../Node\";\nimport Parser from \"../Parser\";\nimport {TokenType} from \"../../types/token-type\";\n\nexport default class DefNode extends Node {\n\n    private readonly defName: string;\n\n    constructor(defName: string, value: string) {\n        super(value);\n\n        this.defName = defName;\n    }\n\n    static parse(parser: Parser): boolean {\n\n        if (parser.acceptWithVal(TokenType.IDENT, 'def')) {\n            parser.advance();\n\n            if (parser.accept(TokenType.IDENT)) {\n                let defName = parser.getCurrVal();\n                parser.advance();\n\n                if (parser.accept(TokenType.STRING) || parser.accept(TokenType.NUMBER)) {\n                    parser.insert(new DefNode(defName, parser.getCurrVal()));\n                    parser.advance();\n\n                    return true;\n                }\n            }\n\n        }\n\n        return false;\n    }\n\n    compile(compiler) {\n        compiler.define(this.defName, this.getVal());\n    }\n}\n","import Node from \"../Node\";\nimport {TokenType} from \"../../types/token-type\";\nimport Parser from \"../Parser\";\nimport StyleNode from \"./StyleNode\";\n\nexport default class StylePropertyNode extends Node {\n\n    private property: string;\n\n    constructor(property: string, value: string) {\n        super(value);\n        this.property = property;\n    }\n\n    static parse(parser: Parser): boolean {\n\n        if (parser.accept(TokenType.IDENT)) {\n\n            let property = parser.getCurrVal();\n            parser.advance();\n\n            if (parser.accept(TokenType.NUMBER) || parser.accept(TokenType.STRING)) {\n                let value = parser.getCurrVal();\n                parser.advance();\n                parser.insert(new StylePropertyNode(property, value));\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    compile(compiler) {\n\n        const parent = this.getParent() as StyleNode;\n        const name = parent.getVal();\n        const style = (parent.isClass ? compiler.get('classes') : compiler.get('identStyles'));\n\n        if (! style[name]) {\n            style[name] = [];\n        }\n\n        style[name] = [...style[name], [this.property, this.getVal()]];\n    }\n}\n","import Node from \"../Node\";\nimport StylePropertyNode from \"./StylePropertyNode.js\";\nimport parseClass from \"../helpers/parse-class.js\";\nimport config from \"../../grammar.js\";\nimport {TokenType} from \"../../types/token-type\";\nimport Parser from \"../Parser\";\n\nexport default class StyleNode extends Node {\n\n    public isClass: boolean;\n\n    constructor(name: string, isClass = false) {\n        super(name);\n        this.isClass = isClass;\n    }\n\n    static parse(parser: Parser): boolean {\n\n        if (parser.acceptWithVal(TokenType.IDENT, 'style')) {\n            parser.advance();\n\n            let className = parseClass(parser);\n            let isClass = true;\n\n            if (className === null) {\n                if (parser.accept(TokenType.IDENT)) {\n                    className = parser.getCurrVal();\n                    isClass = ! isClass;\n                    parser.advance();\n                }\n            }\n\n            if (parser.acceptWithVal(TokenType.SYMBOL, config.BLOCK_OPEN_SYMBOL)) {\n                parser.advance();\n\n                parser.insert(new StyleNode(className, isClass));\n                parser.in();\n            }\n\n            while (StylePropertyNode.parse(parser));\n\n            if (parser.acceptWithVal(TokenType.SYMBOL, config.BLOCK_CLOSE_SYMBOL)) {\n                parser.out();\n                parser.advance();\n            }\n\n            return true;\n        }\n\n        return false;\n    }\n\n    compile(compiler) {\n        this.getChildren().forEach(child => child.compile(compiler));\n    }\n}\n","import Parser from \"../Parser\";\nimport IncludeNode from \"../nodes/IncludeNode\";\nimport DefNode from \"../nodes/DefNode\";\nimport StyleNode from \"../nodes/StyleNode\";\n\nexport default function parseHead(parser: Parser) {\n\n\twhile(\n\t\tDefNode.parse(parser) ||\n\t\tStyleNode.parse(parser) ||\n\t\tIncludeNode.parse(parser)\n\t);\n}\n","import Img from \"../nodes/ImgNode\";\nimport LineNode from \"../nodes/LineNode\";\nimport Txt from \"../nodes/TxtNode\";\nimport GroupNode from \"../nodes/GroupNode\";\nimport ColsNode from \"../nodes/ColsNode\";\nimport Space from \"../nodes/SpaceNode\";\nimport Btn from \"../nodes/BtnNode\";\nimport Parser from \"../Parser\";\nimport IncludeNode from \"../nodes/IncludeNode\";\n\nexport default function parseBody(parser: Parser) {\n\n  while(\n    IncludeNode.parse(parser) ||\n    Space.parse(parser) ||\n    ColsNode.parse(parser) ||\n    GroupNode.parse(parser) ||\n    Img.parse(parser) ||\n    LineNode.parse(parser) ||\n    Txt.parse(parser) ||\n    Btn.parse(parser)\n  );\n}\n","import Node from \"../Node\";\nimport parseBody from \"../helpers/parse-body.js\";\nimport compilerHelpers from \"../../compiler/helpers/compile-with-vgap.js\";\nimport config from \"../../grammar.js\";\nimport Parser from \"../Parser\";\nimport {TokenType} from \"../../types/token-type\";\n\nexport default class BodyNode extends Node {\n\n    static parse(parser: Parser): boolean {\n\n        if (parser.acceptWithVal(TokenType.IDENT, 'body')) {\n            parser.advance();\n\n            if (parser.acceptWithVal(TokenType.SYMBOL, config.BLOCK_OPEN_SYMBOL)) {\n                parser.advance();\n\n                parser.insert(new BodyNode());\n                parser.in();\n\n                parseBody(parser);\n\n                if (parser.expectWithVal(TokenType.SYMBOL, config.BLOCK_CLOSE_SYMBOL)) {\n                    parser.out();\n                    parser.advance();\n                }\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    compile(compiler) {\n\n        const width = parseInt(compiler.variable('width'));\n        const edge = parseInt(compiler.variable('edge'));\n        const totalWidth = width+edge*2;\n\n        compiler.remember('currWidth', width);\n\n        compiler.writeLn('<div style=\"display:none;font-size:1px;color:#ffffff;line-height:1px;max-height:0;max-width:0;opacity:0;overflow:hidden;\">');\n        compiler.writeLn(compiler.variable('preview'));\n        compiler.writeLn(`</div>`);\n\n        compiler.writeLn('<table role=\"presentation\" style=\"width:100%;border:none;border-spacing:0;\">');\n        compiler.writeLn('<tr>');\n        compiler.writeLn('<td align=\"center\" style=\"padding:0;\">');\n\n        compiler.writeLn(`<table role=\"presentation-\" style=\"width:100%;max-width:${totalWidth}px;border:none;border-spacing:0;text-align:left;font-family:Arial,sans-serif;font-size:16px;line-height:22px;color:#363636;\">`);\n        compiler.writeLn('<tr>');\n        compiler.writeLn(`<td width=\"${edge}\">`);\n        compiler.writeLn('</td>');\n        compiler.writeLn(`<td style=\"max-width: ${width}px;\">`);\n\n        compilerHelpers.compileWithVgap(compiler, this.getChildren());\n\n        compiler.writeLn('</td>');\n        compiler.writeLn(`<td width=\"${edge}\">`);\n        compiler.writeLn('</td>');\n        compiler.writeLn('</tr>');\n        compiler.writeLn('</table>');\n\n        compiler.writeLn('</td>');\n        compiler.writeLn('</tr>');\n        compiler.writeLn('</table>');\n    }\n}\n","import Node from \"../Node\";\nimport BodyNode from \"./BodyNode\";\nimport DefNode from \"./DefNode\";\nimport StyleNode from \"./StyleNode\";\nimport Parser from \"../Parser\";\nimport IncludeNode from \"./IncludeNode\";\n\nexport default class RootNode extends Node {\n\n    static parse(parser: Parser): boolean {\n\n        while (\n            DefNode.parse(parser) ||\n            StyleNode.parse(parser) ||\n            IncludeNode.parse(parser)\n        );\n\n        if (BodyNode.parse(parser)) {\n            parser.advance();\n            return true;\n        }\n\n        return false;\n    }\n\n    compile(compiler) {\n        //\n    }\n}\n","import {Token} from \"../types/token\";\nimport {TokenType} from \"../types/token-type\";\nimport {Nullable} from \"../types/nullable\";\n\nexport default class UnexpectedToken extends Error {\n\tconstructor(expected: Nullable<TokenType>, got: Token) {\n\n\t\tif (! expected) {\n\t\t\tsuper(`Unexpected token ${got.type}(${got.value}) at line ${got.line},${got.position}`);\n\t\t} else {\n\t\t\tsuper(`Expected a token with type ${expected ?? 'unknown'}, got ${got.type}(${got.value}) at line ${got.line},${got.position}`);\n\t\t}\n\n\t\tthis.name = \"UnexpectedToken\";\n\t}\n}","import {TokenStream} from \"../types/token-stream\";\nimport Node from \"./Node\";\nimport AstNode from \"./AstNode\";\nimport RootNode from \"./nodes/RootNode\";\nimport {TokenType} from \"../types/token-type\";\nimport UnexpectedToken from \"../errors/UnexpectedToken\";\n\nexport default class Parser {\n\n    private cursor: number = 0;\n\n    private tokens: TokenStream;\n\n    private ast: AstNode = new AstNode();\n\n    private scope: Node = this.ast;\n\n    setTokenStream(tokens: TokenStream) {\n        this.tokens = tokens;\n    }\n\n    parse(tokens: TokenStream): AstNode {\n        this.setTokenStream(tokens);\n        this.parseAll();\n        return this.ast;\n    }\n\n    parseAll() {\n\n        if (! this.tokens.length) {\n            return;\n        }\n\n        if (this.cursor > (this.tokens.length-1)) {\n            return;\n        }\n\n        if (RootNode.parse(this)) {\n            this.parseAll();\n        }\n    }\n\n    getCurrToken() {\n        return this.tokens[this.cursor];\n    }\n\n    getOffsetToken(offset) {\n        return this.tokens[this.cursor + offset];\n    }\n\n    setAttribute(name: string) {\n        const last = this.getLastNode();\n        this.getScope().removeLastChild();\n        this.getScope().setAttribute(name, last);\n    }\n\n    getCurrVal() {\n        return this.getCurrToken().value;\n    }\n\n    advance(offset: number = 1) {\n        this.cursor = this.cursor + offset;\n    }\n\n    accept(type: TokenType): boolean {\n        let token = this.getCurrToken();\n        return (token && token.type === type);\n    }\n\n    expect(type: TokenType): boolean {\n\n        if (this.accept(type)) {\n            return true;\n        }\n\n        throw new UnexpectedToken(type, this.getCurrToken());\n    }\n\n    skip(type: TokenType): boolean {\n        if (this.accept(type)) {\n            this.advance();\n            return true;\n        }\n        return false;\n    }\n\n    skipWithVal(type: TokenType, value: string): boolean {\n        if (this.acceptWithVal(type, value)) {\n            this.advance();\n            return true;\n        }\n        return false;\n    }\n\n    acceptAt(type: TokenType, offset: number): boolean {\n        const token = this.getOffsetToken(offset);\n        return (token && token.type === type);\n    }\n\n    acceptWithVal(type: TokenType, value: string): boolean {\n        const token = this.getCurrToken();\n        return (\n            token &&\n            token.type === type &&\n            token.value === value\n        );\n    }\n\n    expectWithVal(type: TokenType, value: string): boolean {\n\n        if (this.acceptWithVal(type, value)) {\n            return true;\n        }\n\n        throw new UnexpectedToken(type, this.getCurrToken());\n    }\n\n    expectAtWithVal(type: TokenType, offset: number, value: string): boolean {\n\n        if (this.acceptAtWithVal(type, offset, value)) {\n            return true;\n        }\n\n        throw new UnexpectedToken(type, this.getCurrToken());\n    }\n\n    acceptAtWithVal(type: TokenType, offset: number, value: string): boolean {\n        const token = this.getOffsetToken(offset);\n        return (\n            token &&\n            token.type === type &&\n            token.value === value\n        );\n    }\n\n    acceptNextChain(...types: TokenType[]): boolean {\n\n        let result = true;\n\n        for (let i = 0; i < types.length; i++) {\n\n            let token = this.getOffsetToken(i);\n\n            if (!token) {\n                return false;\n            }\n\n            result = (result && token.type === types[i]);\n        }\n\n        return result;\n    }\n\n    getValAt(offset: number): string {\n        let token = this.getOffsetToken(offset);\n        if (token) {\n            return token.value;\n        }\n        return null;\n    }\n\n    getValChain(amount: number): string {\n        let val = '';\n\n        for (let i = 0; i < amount; i++) {\n            let token = this.getOffsetToken(i);\n            if (! token) {\n                return val;\n            }\n            val += token.value;\n        }\n\n        return val;\n    }\n\n    in() {\n        this.scope = this.getLastNode();\n    }\n\n    out() {\n        this.scope = this.scope.getParent();\n    }\n\n    getScope(): Node {\n        return this.scope;\n    }\n\n    getLastNode(): Node {\n        return this.scope.getChildren()[this.scope.getChildren().length-1];\n    }\n\n    insert(node: Node) {\n        node.setParent(this.scope);\n        this.scope.addChild(node);\n    }\n\n    setScope(node: Node) {\n        this.scope = node;\n    }\n\n    traverseUp() {\n        this.setScope(this.getLastNode());\n    }\n\n    traverseDown() {\n        this.setScope(this.getScope().getParent());\n    }\n\n    wrap(node: Node) {\n        const last = this.getLastNode();\n        this.getScope().removeLastChild();\n\n        this.insert(node);\n        this.traverseUp();\n\n        this.insert(last);\n    }\n\n    getAst(): AstNode {\n        return this.ast;\n    }\n}\n","\"use strict\";\n\nimport Parser from \"./parser/Parser.js\";\nimport {TokenStream} from \"./types/token-stream\";\n\nexport default function parse(tokens: TokenStream) {\n    return (new Parser()).parse(tokens);\n}\n","import {AttributeValue} from \"../types/attribute\";\nimport AstNode from \"../parser/AstNode\";\n\nexport default class Compiler {\n\n    private head: string = '';\n\n    private body: string = '';\n\n    private memory: Record<string, any> = {\n        variables: {\n            preview: '',\n            edge: 35,\n            hgap: 10,\n            vgap: 10,\n            width: 650\n        },\n        colsId: 0,\n        imgId: 0,\n        classes: {},\n        identStyles: {}\n    };\n\n    constructor(memory: Record<string, any> = null) {\n        if (memory) {\n            this.setMemory(memory);\n        }\n    }\n\n    getMemory(): Record<string, any> {\n        return this.memory;\n    }\n\n    setMemory(memory: Record<string, any>) {\n        this.memory = memory;\n    }\n\n    write(string: string) {\n        this.body += string;\n    }\n\n    writeLn(string: string) {\n        this.write('\\n'+string);\n    }\n\n    writeHead(string: string) {\n        this.head += string;\n    }\n\n    writeLnHead(string: string) {\n        this.writeHead('\\n'+string);\n    }\n\n    define(name: string, value: AttributeValue) {\n        this.memory.variables[name] = value;\n        return value;\n    }\n\n    variable(name: string): AttributeValue {\n        return (typeof this.memory.variables[name] === 'undefined' ? null : this.memory.variables[name]);\n    }\n\n    remember(name: string, value: AttributeValue) {\n        this.memory[name] = value;\n        return value;\n    }\n\n    get(name: string): AttributeValue {\n        return (typeof this.memory[name] === 'undefined' ? null : this.memory[name]);\n    }\n\n    getHead(): string {\n        return this.head;\n    }\n\n    getBody(): string {\n        return this.body;\n    }\n\n    clone(): Compiler {\n        return new Compiler(this.memory);\n    }\n\n    compile(ast: AstNode) {\n\n        ast.compile(this);\n\n        return `\n            <!doctype html>\n            <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:v=\"urn:schemas-microsoft-com:vml\" xmlns:o=\"urn:schemas-microsoft-com:office:office\">\n                <head>\n                    <!--[if !mso]><!-->\n                    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n                    <!--<![endif]-->\n                    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n                    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n                        <style type=\"text/css\">\n                          * { padding: 0; margin: 0; }\n                          #outlook a { padding:0; }\n                          body { margin:0;padding:0;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%; }\n                          table, td { border-collapse:collapse;mso-table-lspace:0pt;mso-table-rspace:0pt; }\n                          img { border:0;height:auto;line-height:100%; outline:none;text-decoration:none;-ms-interpolation-mode:bicubic; }\n                          p { display:block;margin:13px 0; }\n                        </style>\n                    ${this.getHead()}\n                </head>\n                <body>\n                    ${this.getBody()}\n                </body>\n            </html>\n        `;\n    }\n}\n","import Compiler from \"./compiler/Compiler\";\nimport AstNode from \"./parser/AstNode\";\n\nexport default function compile(ast: AstNode): string {\n    return (new Compiler()).compile(ast);\n}\n"],"mappings":"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","names":["fs","output","code","tokens","ast","tokens","tokens","ast","ast"]}